generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // la conexión de Neon irá aquí
}

model rol {
  id_rol              Int       @id @default(autoincrement())
  nombre              String
  descripcion         String?
  fecha_creacion      DateTime  @default(now())
  fecha_actualizacion DateTime  @updatedAt
  usuarios            usuario[]
}

model usuario {
  id_usuario          Int         @id @default(autoincrement())
  cl_usuario          String?     @unique
  usuario             String?     @unique
  password            String
  nombre              String
  apellido            String
  email               String      @unique
  telefono            String?
  direccion           String?
  genero              String?
  fecha_nac           DateTime?
  nacionalidad        String?
  biografia           String?
  foto                String?
  id_rol              Int
  fecha_creacion      DateTime    @default(now())
  fecha_actualizacion DateTime    @updatedAt
  rol                 rol         @relation(fields: [id_rol], references: [id_rol])
  favoritos           favoritos[]
  reserva             reserva[]
  opiniones           opiniones[]

  @@map("usuario")
}

model categoria {
  id_categoria Int     @id @default(autoincrement())
  nombre       String
  libros       libro[]

  @@map("categoria")
}

model libro {
  id_libro            BigInt        @id
  isbn                String?       @unique
  titulo              String?
  portada             String?
  sinopsis            String?
  editorial           String?
  fecha_publicacion   DateTime?
  fecha_creacion      DateTime      @default(now())
  fecha_actualizacion DateTime      @default(now())
  eliminado           Boolean       @default(false)
  id_categoria        Int?
  categoria           categoria?    @relation(fields: [id_categoria], references: [id_categoria])
  libro_autor         libro_autor[]
  opiniones           opiniones[]
  stock               stock[]
  favoritos           favoritos[]
  reserva             reserva[]

  @@map("libro")
}

model autor {
  id_autor            Int           @id
  nombre              String?
  nacionalidad        String?
  fecha_nac           DateTime?
  fecha_muerte        DateTime?
  biografia           String?
  fecha_creacion      DateTime      @default(now())
  fecha_actualizacion DateTime      @updatedAt
  libro_autor         libro_autor[]
}

model libro_autor {
  id_libro BigInt
  id_autor Int
  libro    libro  @relation(fields: [id_libro], references: [id_libro])
  autor    autor  @relation(fields: [id_autor], references: [id_autor])

  @@id([id_libro, id_autor])
}

model opiniones {
  id_opinion          Int      @id @default(autoincrement())
  id_libro            BigInt?
  id_usuario          Int?
  calificacion        Int?
  comentario          String?
  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  libro   libro?   @relation(fields: [id_libro], references: [id_libro])
  usuario usuario? @relation(fields: [id_usuario], references: [id_usuario])

  @@map("opiniones")
}

model stock {
  id_stock       BigInt   @id
  id_libro       BigInt
  ubicacion      String?
  disponibilidad Boolean?
  estado         String?
  situacion      String?  @default("Disponible")
  libro          libro    @relation(fields: [id_libro], references: [id_libro])
}

model favoritos {
  id_favorito    BigInt   @id @default(autoincrement())
  id_usuario     Int
  id_libro       BigInt
  fecha_agregado DateTime @default(now())

  usuario usuario @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  libro   libro   @relation(fields: [id_libro], references: [id_libro], onDelete: Cascade)

  @@unique([id_usuario, id_libro])
  @@map("favoritos")
}

model reserva {
  id_reserva    BigInt   @id @default(autoincrement())
  id_usuario    Int
  id_libro      BigInt
  fecha_reserva DateTime @default(now())
  estado        String   @default("pendiente")
  cantidad      Int      @default(1)

  usuario usuario @relation(fields: [id_usuario], references: [id_usuario])
  libro   libro   @relation(fields: [id_libro], references: [id_libro])

  @@map("reserva")
}
